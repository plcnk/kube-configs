---
image:
  repository: ghcr.io/kubereboot/kured
  tag: "1.16.0"  # will default to the appVersion in Chart.yaml
  pullPolicy: IfNotPresent
  pullSecrets: []

revisionHistoryLimit: 10

updateStrategy: RollingUpdate
#  requires RollingUpdate updateStrategy
maxUnavailable: 1

podAnnotations: {}
# container.apparmor.security.beta.kubernetes.io/kured: unconfined

dsAnnotations: {}

extraArgs: {}

extraEnvVars:
- name: notifyUrl
  valueFrom:
    secretKeyRef:
      name: discord-webhook
      key: address

configuration:
  useRebootSentinelHostPath: true  # not actually a flag, indicates if the sentinel should be mounted
  metricsHost: ""               # host where metrics will listen
  metricsPort: 8080             # port number where metrics will listen
  lockTtl: 0                    # force clean annotation after this amount of time (default 0, disabled)
  alertFilterRegexp: ""         # alert names to ignore when checking for active alerts
  alertFiringOnly: false        # only consider firing alerts when checking for active alerts
  alertFilterMatchOnly: false   # Only block if the alert-filter-regexp matches active alerts
  blockingPodSelector: []       # label selector identifying pods whose presence should prevent reboots
  endTime: "18:00"              # only reboot before this time of day (default "23:59")
  lockAnnotation: ""            # annotation in which to record locking node (default "weave.works/kured-node-lock")
  period: ""                    # reboot check period (default 1h0m0s)
  forceReboot: false            # force a reboot even if the drain fails or times out (default: false)
  drainGracePeriod: ""          # time in seconds given to each pod to terminate gracefully, if negative, the default value specified in the pod will be used (default: -1)
  drainPodSelector: ""          # only drain pods with labels matching the selector (default: '', all pods)
  drainDelay: 0                 # delay drain for this duration (default: 0, disabled)
  drainTimeout: ""              # timeout after which the drain is aborted (default: 0, infinite time)
  skipWaitForDeleteTimeout: ""  # when time is greater than zero, skip waiting for the pods whose deletion timestamp is older than N seconds while draining a node (default: 0)
  prometheusUrl: ""             # Prometheus instance to probe for active alerts
  rebootDays: [fr, sa, su]        # only reboot on these days (default [su,mo,tu,we,th,fr,sa])
  rebootSentinel: "/var/run/reboot-required"  # path to file whose existence signals need to reboot (default "/var/run/reboot-required")
  rebootSentinelCommand: ""     # command for which a successful run signals need to reboot (default ""). If non-empty, sentinel file will be ignored.
  rebootCommand: "/bin/systemctl reboot"  # command to run when a reboot is required by the sentinel
  rebootDelay: "60s"             # add a delay after drain finishes but before the reboot command is issued
  # notifyUrl: "${NOTIFY_URL}"    # notification URL with the syntax as follows: https://containrrr.dev/shoutrrr/services/overview/
  rebootMethod: ""              # method to use for reboots (default command), available: command, signal
  rebootSignal: ""              # signal to use for reboots (default 39 = SIGRTMIN+5).
  messageTemplateDrain: ""      # slack message template when notifying about a node being drained (default "Draining node %s")
  messageTemplateReboot: ""     # slack message template when notifying about a node being rebooted (default "Rebooted node %s")
  messageTemplateUncordon: ""   # slack message template when notifying about a node being uncordoned (default "Node %s rebooted & uncordoned successfully!")
  startTime: "9:00"             # only reboot after this time of day (default "0:00")
  timeZone: "Europe/Paris"      # time-zone to use (valid zones from "time" golang package)
  annotateNodes: false          # enable 'weave.works/kured-reboot-in-progress' and 'weave.works/kured-most-recent-reboot-needed' node annotations to signify kured reboot operations
  lockReleaseDelay: 10m         # hold lock after reboot by this amount of time (default 0, disabled)
  preferNoScheduleTaint: ""     # Taint name applied during pending node reboot (to prevent receiving additional pods from other rebooting nodes). Disabled by default. Set e.g. to "weave.works/kured-node-reboot" to enable tainting.
  logFormat: "text"             # log format specified as text or json, defaults to text
  preRebootNodeLabels: []       # labels to add to nodes before cordoning (default [])
  postRebootNodeLabels: []      # labels to add to nodes after uncordoning (default [])
  concurrency: 1                # amount of nodes to concurrently reboot. (default 1)


rbac:
  create: true

serviceAccount:
  create: true
  name:

podSecurityPolicy:
  create: false

containerSecurityContext:
  privileged: true  # Give permission to nsenter /proc/1/ns/mnt
  readOnlyRootFilesystem: true
#  allowPrivilegeEscalation: true # Needed when using defaultAllowPrivilegedEscalation: false in psp

# Use the following security-context when "configuration.rebootMethod=signal and configuration.useRebootSentinelHostPath=true"
# containerSecurityContext:
#   privileged: false
#   readOnlyRootFilesystem: true
#   allowPrivilegeEscalation: false
#   capabilities:
#     add:
#     - CAP_KILL
#     drop:
#     - '*'

resources: {}

hostNetwork: false

metrics:
  create: false
  namespace: ""
  labels: {}
  interval: 60s
  scrapeTimeout: ""

service:
  create: false
  port: 8080
  annotations: {}
  name: ""
  type: ClusterIP

livenessProbe:
  httpGet:
    path: /metrics
    port: metrics
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

readinessProbe:
  httpGet:
    path: /metrics
    port: metrics
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

podLabels: {}

priorityClassName: ""

tolerations: []

affinity: {}

nodeSelector:
  kubernetes.io/os: linux

volumeMounts: []

volumes: []

initContainers: {}
